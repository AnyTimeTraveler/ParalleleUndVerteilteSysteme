%
% TrafficLights.mcrl2
%
% A specification of a set of four traffic lights at an intersection.
%
% Copyright (c) 2019-2021 HS Emden-Leer
% All Rights Reserved.
%
% @version 1.40 - 08 Apr 2021 - GJV - parameterize starting axis in TrafficLight(), renamed Crossing into Intersection
% @version 1.30 - 16 May 2020 - GJV - drops the need for a four-way synchronization, thereby becoming easier to translate into Go
% @version 1.20 - 24 May 2019 - GJV - further optimatization, but no longer 100% equivalent with initial standard solution
% @version 1.10 - 15 May 2019 - GJV - remove debug information and superfluous specs 
% @version 1.00 - 17 Apr 2019 - GJV - initial version 
%

%
% Definition of data types
%

sort
    CardinalDirection = struct north | east | south | west;   % 4 directions
    Axis = struct nsAxis | ewAxis;                            % 2 axes
    
map
    axis: CardinalDirection -> Axis;
	next: Axis -> Axis;

eqn
    axis(north) = nsAxis;
    axis(south) = nsAxis;
    axis(east) = ewAxis;
    axis(west) = ewAxis;

	next(nsAxis) = ewAxis;
	next(ewAxis) = nsAxis;

sort
    Colour =  struct red | yellow | green;                    % 3 colours

map
    next : Colour -> Colour;

eqn
    next(red) = green;
    next(green) = yellow;
    next(yellow) = red;
    
% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a TrafficLight
%

act
    show : CardinalDirection # Colour;  % the given traffic light shows the given colour
	waitForAxis: Axis;
	releaseAxis: Axis;
	sync;

proc
    TrafficLight(d : CardinalDirection, startAxis : Axis) =
        % starting axis can continue, other axes have to wait to take over control
%		TrafficLight(d, red);
		(axis(d) == startAxis) -> TrafficLight(d, red) <> waitForAxis(startAxis) . TrafficLight(d, next(startAxis));

    TrafficLight(d : CardinalDirection, c: Colour) =
        % show light, if it is red, handover control and get it back, otherwise synchronize, finally continue with next colour          
		(next(c) == red) -> show(d, c) . sync . show(d, next(c)) . releaseAxis(axis(d)) . TrafficLight(d, next(axis(d))) <>
		show(d, c) . sync . TrafficLight(d, next(c));

% -----------------------------------------------------------------------------------------------------------------------

act
	colourChanged;
	axisSwap: Axis;
	axisChanged: Axis;

proc
    Intersection =
		allow({
			show,
			colourChanged,
			axisSwap,
			axisChanged
		},
		comm({
			sync | sync -> colourChanged,
			waitForAxis | releaseAxis -> axisSwap,
			axisSwap | axisSwap -> axisChanged
		},
%		hide({
%			sync
%		},
			TrafficLight(north, nsAxis) || TrafficLight(east, nsAxis) || TrafficLight(south, nsAxis) || TrafficLight(west, nsAxis)
%        )
	)
);

% -----------------------------------------------------------------------------------------------------------------------
init
    Intersection
;