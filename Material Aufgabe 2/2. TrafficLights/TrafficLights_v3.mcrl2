%
% TrafficLights.mcrl2
%
% A specification of a set of four traffic lights at an intersection.
%
% Copyright (c) 2019-2021 HS Emden-Leer
% All Rights Reserved.
%
% @version 1.40 - 08 Apr 2021 - GJV - parameterize starting axis in TrafficLight(), renamed Crossing into Intersection
% @version 1.30 - 16 May 2020 - GJV - drops the need for a four-way synchronization, thereby becoming easier to translate into Go
% @version 1.20 - 24 May 2019 - GJV - further optimatization, but no longer 100% equivalent with initial standard solution
% @version 1.10 - 15 May 2019 - GJV - remove debug information and superfluous specs 
% @version 1.00 - 17 Apr 2019 - GJV - initial version 
%

%
% Definition of data types
%

sort
    CardinalDirection = struct north | east | south | west;   % 4 directions
    Axis = struct nsAxis | ewAxis;                            % 2 axes
    
map
    axis: CardinalDirection -> Axis;

eqn
    axis(north) = nsAxis;
    axis(south) = nsAxis;
    axis(east) = ewAxis;
    axis(west) = ewAxis;

sort
    Colour =  struct red | yellow | green;                    % 3 colours

map
    next : Colour -> Colour;

eqn
    next(red) = green;
    next(green) = yellow;
    next(yellow) = red;
    
% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a TrafficLight
%

act
    show : CardinalDirection # Colour;  % the given traffic light shows the given colour
    
proc
    TrafficLight(d : CardinalDirection, startAxis : Axis) =
        % become a normal TrafficLight
        TrafficLight(d, red);

    TrafficLight(d : CardinalDirection, c : Colour) =
        % show light
        show(d, c) . TrafficLight(d, next(c));


% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a Map
%

sort
    Map = CardinalDirection -> Colour;                            % sorts K symbolizes a "generic" Key sort and V symbolizes a "generic" Value sort, that have to be instantiated later

map
    _Map: Colour -> Map;                        % _Map symbolizes the Map constructor, the V element is used as default value to initialize undefined map entries
    start: Map;
var
    k: CardinalDirection;
    v: Colour;

eqn
    _Map(v)(k) = v;                        % initializes the map with the given default value (catch-all function)


% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of the Function isCrossingUnsafe
%

map
    % returns a boolean that describes if the crossing is unsafe
    isCrossingSafe: Map -> Bool;

var
    c : Map;
eqn
    isCrossingSafe(c) = (c(north) == red && c(south) == red) || (c(west) == red && c(east) == red);


% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of a Monitor
%

act
    seeColour: CardinalDirection # Colour;

proc
	Monitor(crossing: Map) = 
		sum cd : CardinalDirection . (
			sum col : Colour . (
				isCrossingSafe(crossing[cd -> col]) ->
					seeColour(cd, col) . Monitor(crossing[cd -> col])
			)
		)
	;


% -----------------------------------------------------------------------------------------------------------------------

%
% Definition of an Intersection with four traffic lights and a Monitor
%

act
    colourSeen : CardinalDirection # Colour;

proc
    Intersection =
        allow({
            colourSeen
        },
        comm({
            show | seeColour -> colourSeen
        },
            TrafficLight(north, nsAxis) || TrafficLight(east, nsAxis) || TrafficLight(south, nsAxis) || TrafficLight(west, nsAxis) || Monitor(_Map(red))
        ));

% -----------------------------------------------------------------------------------------------------------------------

init
    Intersection;
